trigger: none


variables:
- name: "connectionName"
  value: ""

- name: "TFSTATE_VAULT_NAME"
  value: 'Terraform'

- name: "TFSTATE_STORAGE_ACCT_NAME"
  value: 'Terraform'

- name: "TFSTATE_RG_NAME"
  value: 'Terraform'

- name: "subscriptionID"
  value: ''

- name: "tenantID"
  value: ''

- name: "clientObjectID"
  value: ""

parameters:
- name: "ResourceGroupName"
  type: string

- name: "delete"
  type: booleanm m
  default: true
  displayName: "Cleanup deployed resources"



stages:
  - stage:
    displayName: Test
    jobs:
      - job:
        displayName: Install Prerequisites
        steps:
          - script: |
              #! /bin/bash
              echo Checking Directoy...
              cd $(System.DefaultWorkingDirectory)
              find ./ -name .git -prune -o -type f 
          - template: ./prerequisites.yaml
            parameters:
              TFSTATE_STORAGE_ACCT_NAME: "${{ variables.TFSTATE_STORAGE_ACCT_NAME }}"

          - task: AzureCLI@2
            name: TFInit
            displayName: Terraform_Init
            inputs:
              azureSubscription: '$(connectionName)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo Setting Environment Variables
                echo "##vso[task.setvariable variable=ARM_CLIENT_ID]${{ variables.clientObjectid}}" 
                clientKey=$(az keyvault secret show --vault-name ${{ variables.TFSTATE_VAULT_NAME}} -n clientSecret --query value -o tsv)
                echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET]$clientKey"
                echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$(subscriptionID)"
                echo "##vso[task.setvariable variable=ARM_TENANT_ID]$(tenantID)"
                echo Getting access key...
                export ARM_ACCESS_KEY=$(az keyvault secret show --vault-name ${{ variables.TFSTATE_VAULT_NAME}} -n saaccesskey --query value -o tsv)
                echo Setting Container Name...
                containerName=$(echo ${{ parameters.customer}} | tr '[:upper:]' '[:lower:]' | tr -s ' ' '-')
                echo Changing Directory...
                cd ${{ parameters.customer}}
                echo Initializing Terraform...
                terraform init -input=false \
                    -backend-config="resource_group_name=${{ variables.TFSTATE_RG_NAME}}" \
                    -backend-config="storage_account_name=${{ variables.TFSTATE_STORAGE_ACCT_NAME}}" \
                    -backend-config="container_name=${containerName}" \
                    -backend-config="key=state.tfstate"
              addSpnToEnvironment: true
          - task: AzureCLI@2
            name: TFPlan
            displayName: Terraform_Plan
            inputs:
              azureSubscription: '$(connectionName)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |                
                echo Checking Directoy...
                cd $(System.DefaultWorkingDirectory)
                find ./ -name .git -prune -o -type f 
                cd ${{ parameters.customer}}
                echo Getting Var File Location
                terraform plan `
                -var-file='default.tfvars' `
                -var 'id=$(Build.BuildId)' `
                -var 'rg=${{parameters.ResourceGroupName}}' `
                -out "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)plan.tf" `
                -lock=false

          - task: AzureCLI@2
            name: TFApply
            displayName: Terraform_Apply
            inputs:
              azureSubscription: '$(connectionName)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |                
                echo Checking Directoy...
                cd $(System.DefaultWorkingDirectory)
                find ./ -name .git -prune -o -type f 
                cd $(echo ${{ parameters.customer}}
                terraform apply -auto-approve plan.tfplan
          
          - ${{ if eq(parameters['delete'], 'true' ) }}:
            - task: AzureCLI@2
              displayName: 'TFDestroy'
              condition: succeeded()
              name: TerraformDestroy
              inputs:
                azureSubscription: '$(connectionName)'
                scriptType: bash
                addSpnToEnvironment: true
                scriptLocation: inlineScript
                inlineScript: |
                  echo Checking Directoy...
                  cd $(System.DefaultWorkingDirectory)/$(echo ${{ parameters.customer}}
                  write-output "terraform destroy..."
                  terraform destroy 
